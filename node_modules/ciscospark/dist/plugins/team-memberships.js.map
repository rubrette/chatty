{"version":3,"sources":["../../src/plugins/team-memberships.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAM,kBAAkB,uBAAY,MAAZ,CAAmB;;;;;;;;;;;AAUzC,QAVyC,kBAUlC,UAVkC,EAUtB;AACjB,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,sBAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GAjBwC;;;;;;;;;;AA0BzC,KA1ByC,eA0BrC,UA1BqC,EA0BzB;AACd,QAAM,KAAK,WAAW,EAAX,IAAiB,UAA5B;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,0BAAwD;AADtC,KAAb,EAGJ,IAHI,CAGC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAHD,CAAP;AAID,GAhCwC;;;;;;;;;;;;AA2CzC,MA3CyC,gBA2CpC,OA3CoC,EA2C3B;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,sBADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GAjDwC;;;;;;;;;;AA0DzC,QA1DyC,kBA0DlC,UA1DkC,EA0DtB;AACjB,QAAM,KAAK,WAAW,EAAX,IAAiB,UAA5B;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,0BAAwD;AAFtC,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;;;AAGb,UAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAO,SAAP;AACD;AACD,aAAO,IAAI,IAAX;AACD,KAXI,CAAP;AAYD,GAzEwC;;;;;;;;;;AAkFzC,QAlFyC,kBAkFlC,UAlFkC,EAkFtB;AACjB,QAAM,KAAK,WAAW,EAAX,IAAiB,UAA5B;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,0BAAwD,EAFtC;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD;AA1FwC,CAAnB,CAAxB;;kBA6Fe,e","file":"team-memberships.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~TeamMembership\n * @property {string} id - (server generated) The team ID\n * @property {string} personId - The person ID\n * @property {string} personEmail - The email address of the person\n * @property {boolean} isModerator - Set to `true` to make the person a team\n * moderator\n */\n\n/**\n * Team Memberships represent a person's relationship to a team. Use this API to\n * list members of any team that you're in or create memberships to invite\n * someone to a team. Team memberships can also be updated to make someome a\n * moderator or deleted to remove them from the team.\n *\n * Just like in the Spark app, you must be a member of the team in order to list\n * its memberships or invite people.\n */\nconst TeamMemberships = SparkPlugin.extend({\n  /**\n   * Add someone to a team by Person ID or email address; optionally making them\n   * a moderator.\n   * @param {Types~TeamMembership} membership\n   * @returns {Promise<Types~TeamMembership>}\n   * @memberof TeamMemberships.prototype\n   * @example\n   * <%= team_memberships__create %>\n   */\n  create(membership) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Get details for a membership by ID.\n   * @param {Types~TeamMembership|string} membership\n   * @returns {Promise<Types~TeamMembership>}\n   * @example\n   * <%= team_memberships__get %>\n   */\n  get(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Lists all team memberships. By default, lists memberships for teams to\n   * which the authenticated user belongs.\n   * @param {Object} options\n   * @param {string} options.max\n   * @returns {[type]}\n   * @example\n   * <%= team_memberships__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/team/memberships`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a membership by ID.\n   * @param {Types~TeamMembership|string} membership\n   * @returns {Promise}\n   * @example\n   * <%= team_memberships__remove %>\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Updates properties for a membership.\n   * @param {Types~TeamMembership} membership\n   * @returns {Promise<Types~TeamMembership>}\n   * @example\n   * <%= team_memberships__update %>\n   */\n  update(membership) {\n    const id = membership.id || membership;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/team/memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default TeamMemberships;\n"]}