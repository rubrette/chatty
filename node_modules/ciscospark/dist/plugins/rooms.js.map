{"version":3,"sources":["../../src/plugins/rooms.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAM,QAAQ,uBAAY,MAAZ,CAAmB;;;;;;;;;;;;;;;;AAe/B,QAf+B,kBAexB,IAfwB,EAelB;AACX,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,WAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GAtB8B;;;;;;;;;;;;;;;;;;;AAwC/B,KAxC+B,eAwC3B,IAxC2B,EAwCrB,OAxCqB,EAwCZ;AACjB,QAAM,KAAK,KAAK,EAAL,IAAW,IAAtB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAD3B;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAJD,CAAP;AAKD,GAhD8B;;;;;;;;;;;;;;;;;;;;;AAoE/B,MApE+B,gBAoE1B,OApE0B,EAoEjB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,YADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GA1E8B;;;;;;;;;;;;;;AAuF/B,QAvF+B,kBAuFxB,IAvFwB,EAuFlB;AACX,QAAM,KAAK,KAAK,EAAL,IAAW,IAAtB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C;AAF3B,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;;;AAGb,UAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAO,SAAP;AACD;AACD,aAAO,IAAI,IAAX;AACD,KAXI,CAAP;AAYD,GArG8B;;;;;;;;;;;;;;AAkH/B,QAlH+B,kBAkHxB,IAlHwB,EAkHlB;AACX,QAAM,KAAK,KAAK,EAAhB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAF3B;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD;AA1H8B,CAAnB,CAAd;;kBA6He,K","file":"rooms.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Room\n * @property {string} id - (server generated) Unique identifier for the room\n * @property {string} title - The display name for the room. All room members\n * will see the title so make it something good\n * @property {isoDate} created - (server generated) The date and time that the\n * room was created\n * @property {string} teamId - (optional): The id of the team to which the room\n * belongs\n */\n\n/**\n * Rooms are virtual meeting places for getting stuff done. This resource\n * represents the room itself. Check out the Memberships API to learn how to add\n * and remove people from rooms and the Messages API for posting and managing\n * content.\n * @class\n * @extends SparkPlugin\n */\nconst Rooms = SparkPlugin.extend({\n  /**\n   * Creates a new room. The authenticated user is automatically added as a\n   * member of the room. See the @{link Memberships} to learn how to add more\n   * people to the room.\n   * {@link Membership}\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room} room\n   * @returns {Promise<Types~Room>}\n   * @example\n   * <%= rooms__create_es6 %>\n   * @example\n   * <%= rooms__create %>\n   */\n  create(room) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/rooms`,\n      body: room\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room|string} room\n   * @param {Object} options\n   * @param {Object} options.includeSipAddress To show the SIP address for the\n   * room in the response, set this value to `true`. A session initiation\n   * protocol (SIP) address is a URI that addresses a specific telephone\n   * extension on a voice over IP (VOIP) system.\n   * @returns {Promise<Types~Room>}\n   * @example\n   * <%= rooms__get_es6 %>\n   * @example\n   * <%= rooms__get %>\n   */\n  get(room, options) {\n    const id = room.id || room;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of rooms. In most cases the results will only contain rooms\n   * that the authentiated user is a member of.\n   * @instance\n   * @memberof Rooms\n   * @param {Object} options\n   * @param {Object} options.max Limit the maximum number of rooms in the\n   * response.\n   * @param {Object} options.includeSipAddress To show the SIP address for the\n   * room in the response, set this value to `true`. A session initiation\n   * protocol (SIP) address is a URI that addresses a specific telephone\n   * extension on a voice over IP (VOIP) system.\n   * @returns {Promise<Page<Types~Room>>}\n   * @example\n   * <%= rooms__list_es6 %>\n   * @example\n   * <%= rooms__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/rooms/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single room.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room|string} room\n   * @returns {Promise}\n   * @example\n   * <%= rooms__remove_es6 %>\n   * @example\n   * <%= rooms__remove %>\n   */\n  remove(room) {\n    const id = room.id || room;\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single room's properties.\n   * @instance\n   * @memberof Rooms\n   * @param {Types~Room} room\n   * @returns {Promise<Types~Room>}\n   * @example\n   * <%= rooms__update_es6 %>\n   * @example\n   * <%= rooms__update %>\n   */\n  update(room) {\n    const id = room.id;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/rooms/${id}`,\n      body: room\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Rooms;\n"]}