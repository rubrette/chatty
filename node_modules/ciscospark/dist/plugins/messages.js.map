{"version":3,"sources":["../../src/plugins/messages.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAM,WAAW,uBAAY,MAAZ,CAAmB;;;;;;;;;;;;;AAYlC,QAZkC,kBAY3B,OAZ2B,EAYlB;AACd,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,cAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GAnBiC;;;;;;;;;;;;;;AAgClC,KAhCkC,eAgC9B,OAhC8B,EAgCrB;AACX,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAzB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,kBAAgD;AAD9B,KAAb,EAGJ,IAHI,CAGC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAHD,CAAP;AAID,GAvCiC;;;;;;;;;;;;;;;;;AAuDlC,MAvDkC,gBAuD7B,OAvD6B,EAuDpB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,cADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GA7DiC;;;;;;;;;;;;;;;;;AA6ElC,QA7EkC,kBA6E3B,OA7E2B,EA6ElB;AACd,QAAM,KAAK,QAAQ,EAAR,IAAc,OAAzB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,sBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,kBAAgD;AAF9B,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD,EAAS;;;AAGb,UAAI,IAAI,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,eAAO,SAAP;AACD;AACD,aAAO,IAAI,IAAX;AACD,KAXI,CAAP;AAYD;AA5FiC,CAAnB,CAAjB;;kBA+Fe,Q","file":"messages.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Message\n * @property {uuid} id - (server generated) Unique identifier for the message\n * @property {uuid} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The message posted to the room in plain text\n * @property {isoDate} created - (server generated)The source URLs for the\n * message attachment. See the {@link Content & Attachments{ Guide for a list of\n * supported media types.\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Spark as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link Message Attachments Guide} for a list of supported media types.\n * @class\n * @extends SparkPlugin\n */\nconst Messages = SparkPlugin.extend({\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Message} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * <%= messages__create_es6 %>\n   * @example\n   * <%= messages__create %>\n   */\n  create(message) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      body: message\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Room|string} message\n   * @returns {Promise<Types~Message>}\n   * @example\n   * <%= messages__get_es6 %>\n   * @example\n   * <%= messages__get %>\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<Types~Message>>}\n   * @example\n   * <%= messages__list_es6 %>\n   * @example\n   * <%= messages__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/messages`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {Types~Message|uuid} message\n   * @returns {Promise}}\n   * @example\n   * <%= messages__remove_es6 %>\n   * @example\n   * <%= messages__remove %>\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: `DELETE`,\n      uri: `${this.config.hydraServiceUrl}/messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n        return res.body;\n      });\n  }\n});\n\nexport default Messages;\n"]}