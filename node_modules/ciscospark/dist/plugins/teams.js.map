{"version":3,"sources":["../../src/plugins/teams.js"],"names":[],"mappings":";;;;;;AAMA;;;;AACA;;;;;;;;;;;;;;;;;;AAUA,IAAM,QAAQ,uBAAY,MAAZ,CAAmB;;;;;;;;;;AAS/B,QAT+B,kBASxB,IATwB,EASlB;AACX,WAAO,KAAK,OAAL,CAAa;AAClB,oBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,WAFkB;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD,GAhB8B;;;;;;;;;;;;AA2B/B,KA3B+B,eA2B3B,IA3B2B,EA2BrB,OA3BqB,EA2BZ;AACjB,QAAM,KAAK,KAAK,EAAL,IAAW,IAAtB;;AAEA,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAD3B;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAJ,CAAS,KAAT,IAAkB,IAAI,IAA/B;AAAA,KAJD,CAAP;AAKD,GAnC8B;;;;;;;;;;;;;AA+C/B,MA/C+B,gBA+C1B,OA/C0B,EA+CjB;AAAA;;AACZ,WAAO,KAAK,OAAL,CAAa;AAClB,WAAQ,KAAK,MAAL,CAAY,eAApB,YADkB;AAElB,UAAI;AAFc,KAAb,EAIJ,IAJI,CAIC,UAAC,GAAD;AAAA,aAAS,mBAAS,GAAT,EAAc,MAAK,KAAnB,CAAT;AAAA,KAJD,CAAP;AAKD,GArD8B;;;;;;;;;;;AA+D/B,QA/D+B,kBA+DxB,IA/DwB,EA+DlB;AACX,QAAM,KAAK,KAAK,EAAhB;AACA,WAAO,KAAK,OAAL,CAAa;AAClB,mBADkB;AAElB,WAAQ,KAAK,MAAL,CAAY,eAApB,eAA6C,EAF3B;AAGlB,YAAM;AAHY,KAAb,EAKJ,IALI,CAKC,UAAC,GAAD;AAAA,aAAS,IAAI,IAAb;AAAA,KALD,CAAP;AAMD;AAvE8B,CAAnB,CAAd;;kBA0Ee,K","file":"teams.js","sourcesContent":["/**!\n *\n * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.\n * @private\n */\n\nimport Page from '../lib/page';\nimport {SparkPlugin} from '@ciscospark/spark-core';\n\n/**\n * @typedef {Object} Types~Team\n * @property {string} id - (server generated) The unique ID for the team.\n * @property {string} name - The name of the team.\n * @property {isoDate} created - (server generated) The date and time when the\n * team was created, in ISO8601 format.\n */\n\nconst Teams = SparkPlugin.extend({\n  /**\n   * Create a new team.\n   * @param {Types~Team} team\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams.prototype\n   * @example\n   * <%= teams__create %>\n   */\n  create(team) {\n    return this.request({\n      method: `POST`,\n      uri: `${this.config.hydraServiceUrl}/teams`,\n      body: team\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single team\n   * @param {Types~Team|string} team\n   * @param {object} options\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams.prototype\n   * @example\n   * <%= teams__get %>\n   */\n  get(team, options) {\n    const id = team.id || team;\n\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/teams/${id}`,\n      qs: options\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * List teams.\n   * @param {object} options\n   * @param {object} options.max Limit the maximum number of teams in the\n   * response.\n   * @returns {Promise<Page<Types~Team>>}\n   * @memberof Teams.prototype\n   * @example\n   * <%= teams__list %>\n   */\n  list(options) {\n    return this.request({\n      uri: `${this.config.hydraServiceUrl}/teams/`,\n      qs: options\n    })\n      .then((res) => new Page(res, this.spark));\n  },\n\n  /**\n   * Update a team.\n   * @param {Types~Team} team\n   * @returns {Promise<Types~Team>}\n   * @memberof Teams.prototype\n   * @example\n   * <%= teams__update %>\n   */\n  update(team) {\n    const id = team.id;\n    return this.request({\n      method: `PUT`,\n      uri: `${this.config.hydraServiceUrl}/teams/${id}`,\n      body: team\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default Teams;\n"]}