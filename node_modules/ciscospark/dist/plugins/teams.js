'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _page = require('../lib/page');

var _page2 = _interopRequireDefault(_page);

var _sparkCore = require('@ciscospark/spark-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {Object} Types~Team
 * @property {string} id - (server generated) The unique ID for the team.
 * @property {string} name - The name of the team.
 * @property {isoDate} created - (server generated) The date and time when the
 * team was created, in ISO8601 format.
 */

/**!
 *
 * Copyright (c) 2015-2016 Cisco Systems, Inc. See LICENSE file.
 * @private
 */

var Teams = _sparkCore.SparkPlugin.extend({
  /**
   * Create a new team.
   * @param {Types~Team} team
   * @returns {Promise<Types~Team>}
   * @memberof Teams.prototype
   * @example
   * <%= teams__create %>
   */

  create: function create(team) {
    return this.request({
      method: 'POST',
      uri: this.config.hydraServiceUrl + '/teams',
      body: team
    }).then(function (res) {
      return res.body;
    });
  },


  /**
   * Returns a single team
   * @param {Types~Team|string} team
   * @param {object} options
   * @returns {Promise<Types~Team>}
   * @memberof Teams.prototype
   * @example
   * <%= teams__get %>
   */
  get: function get(team, options) {
    var id = team.id || team;

    return this.request({
      uri: this.config.hydraServiceUrl + '/teams/' + id,
      qs: options
    }).then(function (res) {
      return res.body.items || res.body;
    });
  },


  /**
   * List teams.
   * @param {object} options
   * @param {object} options.max Limit the maximum number of teams in the
   * response.
   * @returns {Promise<Page<Types~Team>>}
   * @memberof Teams.prototype
   * @example
   * <%= teams__list %>
   */
  list: function list(options) {
    var _this = this;

    return this.request({
      uri: this.config.hydraServiceUrl + '/teams/',
      qs: options
    }).then(function (res) {
      return new _page2.default(res, _this.spark);
    });
  },


  /**
   * Update a team.
   * @param {Types~Team} team
   * @returns {Promise<Types~Team>}
   * @memberof Teams.prototype
   * @example
   * <%= teams__update %>
   */
  update: function update(team) {
    var id = team.id;
    return this.request({
      method: 'PUT',
      uri: this.config.hydraServiceUrl + '/teams/' + id,
      body: team
    }).then(function (res) {
      return res.body;
    });
  }
});

exports.default = Teams;
//# sourceMappingURL=teams.js.map
